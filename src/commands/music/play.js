const {
    SlashCommandBuilder,
    EmbedBuilder,
    ChannelType,
} = require("discord.js");
const { formatDuration } = require("./utils");

module.exports = {
    data: new SlashCommandBuilder()
        .setName("play")
        .setDescription("Ph√°t m·ªôt b√†i h√°t")
        .addStringOption((option) =>
            option
                .setName("query")
                .setDescription("T√™n b√†i h√°t ho·∫∑c URL")
                .setRequired(true)
        ),
    async execute(interaction) {
        const query = interaction.options.getString("query");
        const voiceChannel = interaction.member.voice.channel;

        if (!voiceChannel) {
            const embed = new EmbedBuilder()
                .setColor("#ff0000")
                .setDescription(
                    "`‚ùå` `B·∫°n c·∫ßn v√†o k√™nh voice ho·∫∑c s√¢n kh·∫•u ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!`"
                )
                .setFooter({ text: `From CAPTAIN BOY with ‚ù§Ô∏è` })
                .setTimestamp();
            return interaction.reply({ embeds: [embed] });
        }

        await interaction.deferReply();

        try {
            const kazagumo = global.kazagumo;
            // Ki·ªÉm tra k·∫øt n·ªëi Lavalink
            if (!kazagumo || !kazagumo.shoukaku.nodes.size) {
                const embed = new EmbedBuilder()
                    .setColor("#ff0000")
                    .setDescription(
                        "`‚ùå` `Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß nh·∫°c. Vui l√≤ng th·ª≠ l·∫°i sau!`"
                    )
                    .setFooter({ text: `From CAPTAIN BOY with ‚ù§Ô∏è` })
                    .setTimestamp();
                return interaction.editReply({ embeds: [embed] });
            }

            // T·∫°o ho·∫∑c l·∫•y player
            let player =
                kazagumo.players.get(interaction.guild.id) ||
                (await kazagumo.createPlayer({
                    guildId: interaction.guild.id,
                    textId: interaction.channel.id,
                    voiceId: voiceChannel.id,
                    volume: 40,
                }));

            // X·ª≠ l√Ω stage channel
            const voiceState = interaction.guild.members.me?.voice;
            if (
                voiceState?.channel?.type === ChannelType.GuildStageVoice &&
                voiceState.suppress
            ) {
                await voiceState
                    .setSuppressed(false)
                    .catch(() => voiceState.setRequestToSpeak(true));
            }

            let result = await kazagumo.search(query, {
                requester: interaction.user,
            });
            if (!result.tracks.length) {
                const embed = new EmbedBuilder()
                    .setColor("#ff0000")
                    .setDescription("`‚ùå` `Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£!`")
                    .setFooter({ text: `From CAPTAIN BOY with ‚ù§Ô∏è` })
                    .setTimestamp();
                return interaction.editReply({ embeds: [embed] });
            }

            const embed = new EmbedBuilder().setColor("#00ff00");

            if (result.type === "PLAYLIST") {
                player.queue.add(result.tracks);
                embed
                    .setColor("#2b2d31")
                    .setDescription(
                        `\`‚úÖ\` \`ƒê√£ th√™m danh s√°ch ph√°t v√†o h√†ng ƒë·ª£i\`\n\n` +
                            `\`üìù\` \`T√™n danh s√°ch: ${result.playlistName}\`\n` +
                            `\`üéµ\` \`S·ªë b√†i h√°t: ${result.tracks.length}\`\n` +
                            `\`‚è±Ô∏è\` \`T·ªïng th·ªùi l∆∞·ª£ng: ${formatDuration(
                                result.tracks.reduce(
                                    (acc, track) => acc + track.length,
                                    0
                                )
                            )}\``
                    )
                    .setFooter({ text: `From CAPTAIN BOY with ‚ù§Ô∏è` })
                    .setTimestamp();
            } else {
                const track = result.tracks[0];
                player.queue.add(track);
                embed
                    .setColor("#2b2d31")
                    .setDescription(
                        `\`‚úÖ\` \`ƒê√£ th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i\`\n\n` +
                            `\`üéµ\` \`B√†i h√°t: ${track.title}\`\n` +
                            `\`‚è±Ô∏è\` \`Th·ªùi l∆∞·ª£ng: ${formatDuration(
                                track.length
                            )}\`\n` +
                            `\`üë§\` \`Y√™u c·∫ßu b·ªüi: ${track.requester}\``
                    )
                    .setThumbnail(track.thumbnail)
                    .setFooter({ text: `From CAPTAIN BOY with ‚ù§Ô∏è` })
                    .setTimestamp();
            }

            if (!player.playing && !player.paused) player.play();
            await interaction.editReply({ embeds: [embed] });
        } catch (error) {
            console.error(error);
            const embed = new EmbedBuilder()
                .setColor("#ff0000")
                .setDescription(
                    "`‚ùå` `ƒê√£ x·∫£y ra l·ªói khi ph√°t nh·∫°c! Vui l√≤ng th·ª≠ l·∫°i sau.`"
                )
                .setFooter({ text: `From CAPTAIN BOY with ‚ù§Ô∏è` })
                .setTimestamp();
            await interaction.editReply({ embeds: [embed] });
        }
    },
};
