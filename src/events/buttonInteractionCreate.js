const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const db = require("../data/mongodb");
const { getEmojiKeyFromCustomId, updateEmojiButtons } = require("../utils/emojiButtons");

// Track processed interactions to prevent duplicates
const processedInteractions = new Set();

module.exports = {
    name: "buttonInteractionCreate",
    async execute(interaction) {
        if (!interaction.isButton()) return;

        // Prevent duplicate processing
        const interactionKey = `${interaction.id}-${interaction.customId}`;
        if (processedInteractions.has(interactionKey)) {
            console.log(`Duplicate interaction detected: ${interactionKey}`);
            return;
        }
        processedInteractions.add(interactionKey);

        // Clean up old interactions (keep only last 1000)
        if (processedInteractions.size > 1000) {
            const iterator = processedInteractions.values();
            for (let i = 0; i < 500; i++) {
                processedInteractions.delete(iterator.next().value);
            }
        }

        const { customId } = interaction;
        
        // X·ª≠ l√Ω c√°c button review confession
        if (customId.startsWith('approve_') || customId.startsWith('reject_') || customId.startsWith('edit_')) {
            await handleConfessionReview(interaction, customId);
        }
        // X·ª≠ l√Ω emoji buttons
        else if (customId.startsWith('emoji_')) {
            await handleEmojiButton(interaction, customId);
        }
    },
};

async function handleEmojiButton(interaction, customId) {
    // Defer reply ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh timeout
    try {
        await interaction.deferUpdate();
    } catch (deferError) {
        console.error("Kh√¥ng th·ªÉ defer update:", deferError.message);
        return;
    }

    const emojiKey = getEmojiKeyFromCustomId(customId);
    if (!emojiKey) {
        try {
            await interaction.followUp({
                content: "‚ùå Emoji kh√¥ng h·ª£p l·ªá!",
                flags: 64
            });
        } catch (replyError) {
            console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
        }
        return;
    }

    try {
        // L·∫•y confession ID t·ª´ message embed
        const embed = interaction.message.embeds[0];
        if (!embed || !embed.title) {
            return interaction.reply({
                content: "‚ùå Kh√¥ng t√¨m th·∫•y confession!",
                flags: 64
            });
        }

        // T√¨m confession ID t·ª´ title (Confession #123)
        const titleMatch = embed.title.match(/Confession #(\d+)/);
        if (!titleMatch) {
            try {
                await interaction.followUp({
                    content: "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh confession!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
            return;
        }

        const confessionNumber = parseInt(titleMatch[1]);
        const confession = await db.getConfessionByNumber(interaction.guild.id, confessionNumber);
        
        if (!confession) {
            try {
                await interaction.followUp({
                    content: "‚ùå Kh√¥ng t√¨m th·∫•y confession!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
            return;
        }

        // Ki·ªÉm tra xem user ƒë√£ react ch∆∞a
        const userReactions = await db.getUserEmojiReactions(interaction.guild.id, confession._id, interaction.user.id);
        const hasReacted = userReactions.includes(emojiKey);

        if (hasReacted) {
            // X√≥a reaction
            await db.removeEmojiReaction(interaction.guild.id, confession._id, interaction.user.id, emojiKey);
            userReactions.splice(userReactions.indexOf(emojiKey), 1);
        } else {
            // Th√™m reaction
            await db.addEmojiReaction(interaction.guild.id, confession._id, interaction.user.id, emojiKey);
            userReactions.push(emojiKey);
        }

        // L·∫•y emoji counts m·ªõi
        const emojiCounts = await db.getEmojiCounts(interaction.guild.id, confession._id);

        // C·∫≠p nh·∫≠t buttons
        const updatedComponents = updateEmojiButtons(
            interaction.message.components,
            emojiCounts,
            userReactions
        );

        // C·∫≠p nh·∫≠t message
        try {
            await interaction.editReply({
                embeds: [embed],
                components: updatedComponents
            });
        } catch (updateError) {
            console.error("Kh√¥ng th·ªÉ edit reply:", updateError.message);
            // Fallback: th·ª≠ followUp n·∫øu edit th·∫•t b·∫°i
            try {
                await interaction.followUp({
                    content: "‚úÖ Reaction ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ followUp interaction:", replyError.message);
            }
        }

    } catch (error) {
        console.error('Error handling emoji button:', error);
        try {
            await interaction.reply({
                content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω emoji!",
                flags: 64
            });
        } catch (replyError) {
            console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
        }
    }
}

async function handleConfessionReview(interaction, customId) {
    // Ki·ªÉm tra quy·ªÅn
    if (!interaction.member.permissions.has('ManageMessages')) {
        return interaction.reply({
            content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ duy·ªát confession!",
            flags: 64 // Ephemeral flag
        });
    }

    const confessionId = customId.split('_')[1];
    const action = customId.split('_')[0];

    try {
        const confession = await db.getConfession(confessionId);
        if (!confession) {
            return interaction.reply({
                content: "‚ùå Kh√¥ng t√¨m th·∫•y confession n√†y!",
                flags: 64 // Ephemeral flag
            });
        }

        // Ki·ªÉm tra xem confession ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
        if (confession.status !== 'pending') {
            return interaction.reply({
                content: `‚ùå Confession n√†y ƒë√£ ƒë∆∞·ª£c ${confession.status === 'approved' ? 'duy·ªát' : 't·ª´ ch·ªëi'} r·ªìi!`,
                flags: 64 // Ephemeral flag
            });
        }

        const guildSettings = await db.getGuildSettings(interaction.guild.id);
        
        if (action === 'approve') {
            // Duy·ªát confession
            const confessionChannel = interaction.guild.channels.cache.get(guildSettings.confessionChannel);
            if (!confessionChannel) {
                return interaction.reply({
                    content: "‚ùå K√™nh confession ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!",
                    flags: 64 // Ephemeral flag
                });
            }

            // L·∫•y th√¥ng tin ng∆∞·ªùi g·ª≠i confession
            const confessionAuthor = await interaction.client.users.fetch(confession.userId);
            
            // Ki·ªÉm tra ch·∫ø ƒë·ªô ·∫©n danh t·ª´ confession
            const isAnonymous = confession.isAnonymous;

            // T·∫°o embed cho confession ƒë√£ duy·ªát
            const approvedEmbed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle("üíù Confession #" + (guildSettings.confessionCounter + 1))
                .setDescription(confession.content)
                .addFields(
                    { 
                        name: "üë§ Ng∆∞·ªùi g·ª≠i", 
                        value: isAnonymous ? "üïµÔ∏è ·∫®n danh" : `<@${confession.userId}>`, 
                        inline: true 
                    },
                    { 
                        name: "‚è∞ Th·ªùi gian", 
                        value: `<t:${Math.floor(new Date(confession.createdAt).getTime() / 1000)}:R>`, 
                        inline: true 
                    }
                )
                .setFooter({
                    text: `Confession Bot ‚Ä¢ ${interaction.guild.name}`,
                    iconURL: interaction.guild.iconURL(),
                })
                .setTimestamp();

            // Ch·ªâ hi·ªÉn th·ªã author n·∫øu kh√¥ng ·ªü ch·∫ø ƒë·ªô ·∫©n danh
            if (!isAnonymous) {
                approvedEmbed.setAuthor({
                    name: confessionAuthor.username,
                    iconURL: confessionAuthor.displayAvatarURL()
                });
            }

            // T·∫°o emoji buttons
            const { createEmojiButtons } = require("../utils/emojiButtons");
            const emojiCounts = await db.getEmojiCounts(interaction.guild.id, confession._id);
            const emojiButtons = createEmojiButtons(emojiCounts);

            const message = await confessionChannel.send({ 
                embeds: [approvedEmbed],
                components: emojiButtons
            });

            // T·∫°o thread cho confession ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b√¨nh lu·∫≠n
            const thread = await message.startThread({
                name: `üí¨ B√¨nh lu·∫≠n Confession #${guildSettings.confessionCounter + 1}`,
                autoArchiveDuration: 1440, // 24 gi·ªù
                reason: 'Thread cho confession'
            });

            // G·ª≠i tin nh·∫Øn ch√†o m·ª´ng trong thread
            // await thread.send({
            //     content: `üí¨ **B√¨nh lu·∫≠n Confession #${(await db.getGuildSettings(interaction.guild.id)).confession_counter}**\n\nH√£y ƒë·ªÉ l·∫°i c·∫£m x√∫c v√† b√¨nh lu·∫≠n c·ªßa b·∫°n v·ªÅ confession n√†y!`
            // });

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong database v·ªõi message ID v√† thread ID
            const updatedConfession = await db.updateConfessionStatus(confessionId, 'approved', interaction.user.id, message.id, thread.id);
            
            // Ki·ªÉm tra xem update c√≥ th√†nh c√¥ng kh√¥ng
            if (!updatedConfession || updatedConfession.status !== 'approved') {
                console.error('Failed to update confession status');
                // X√≥a message ƒë√£ g·ª≠i n·∫øu update th·∫•t b·∫°i
                try {
                    await message.delete();
                    await thread.delete();
                } catch (deleteError) {
                    console.error('Failed to delete message/thread:', deleteError.message);
                }
                return;
            }

            // C·∫≠p nh·∫≠t embed g·ªëc
            const updatedEmbed = EmbedBuilder.from(interaction.message.embeds[0])
                .setColor(0x00FF00)
                .setTitle("‚úÖ Confession ƒê√£ ƒê∆∞·ª£c Duy·ªát")
                .addFields(
                    { name: "üë®‚Äç‚öñÔ∏è Duy·ªát b·ªüi", value: `<@${interaction.user.id}>`, inline: true },
                    { name: "‚è∞ Th·ªùi gian duy·ªát", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
                );

            // Disable buttons
            const disabledButtons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`approve_${confessionId}`)
                        .setLabel("‚úÖ ƒê√£ Duy·ªát")
                        .setStyle(ButtonStyle.Success)
                        .setDisabled(true),
                    new ButtonBuilder()
                        .setCustomId(`reject_${confessionId}`)
                        .setLabel("‚ùå T·ª´ ch·ªëi")
                        .setStyle(ButtonStyle.Danger)
                        .setDisabled(true),
                    new ButtonBuilder()
                        .setCustomId(`edit_${confessionId}`)
                        .setLabel("‚úèÔ∏è Ch·ªânh s·ª≠a")
                        .setStyle(ButtonStyle.Secondary)
                        .setDisabled(true)
                );

            await interaction.message.edit({
                embeds: [updatedEmbed],
                components: [disabledButtons]
            });

            try {
                await interaction.reply({
                    content: `‚úÖ ƒê√£ duy·ªát confession #${confessionId}!`,
                    flags: 64 // Ephemeral flag
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }

            // Th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i
            try {
                const user = await interaction.client.users.fetch(confession.userId);
                await user.send({
                    content: `üéâ Confession c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† ƒëƒÉng l√™n server **${interaction.guild.name}**!`
                });
            } catch (error) {
                console.log("Kh√¥ng th·ªÉ g·ª≠i DM cho user:", error.message);
            }

        } else if (action === 'reject') {
            // T·ª´ ch·ªëi confession
            await db.updateConfessionStatus(confessionId, 'rejected', interaction.user.id);

            const updatedEmbed = EmbedBuilder.from(interaction.message.embeds[0])
                .setColor(0xFF0000)
                .setTitle("‚ùå Confession ƒê√£ B·ªã T·ª´ Ch·ªëi")
                .addFields(
                    { name: "üë®‚Äç‚öñÔ∏è T·ª´ ch·ªëi b·ªüi", value: `<@${interaction.user.id}>`, inline: true },
                    { name: "‚è∞ Th·ªùi gian t·ª´ ch·ªëi", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
                );

            const disabledButtons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`approve_${confessionId}`)
                        .setLabel("‚úÖ Duy·ªát")
                        .setStyle(ButtonStyle.Success)
                        .setDisabled(true),
                    new ButtonBuilder()
                        .setCustomId(`reject_${confessionId}`)
                        .setLabel("‚ùå ƒê√£ T·ª´ Ch·ªëi")
                        .setStyle(ButtonStyle.Danger)
                        .setDisabled(true),
                    new ButtonBuilder()
                        .setCustomId(`edit_${confessionId}`)
                        .setLabel("‚úèÔ∏è Ch·ªânh s·ª≠a")
                        .setStyle(ButtonStyle.Secondary)
                        .setDisabled(true)
                );

            await interaction.message.edit({
                embeds: [updatedEmbed],
                components: [disabledButtons]
            });

            try {
                await interaction.reply({
                    content: `‚ùå ƒê√£ t·ª´ ch·ªëi confession #${confessionId}!`,
                    flags: 64 // Ephemeral flag
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }

            // Th√¥ng b√°o cho ng∆∞·ªùi g·ª≠i
            try {
                const user = await interaction.client.users.fetch(confession.userId);
                await user.send({
                    content: `üòî Confession c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi tr√™n server **${interaction.guild.name}**.`
                });
            } catch (error) {
                console.log("Kh√¥ng th·ªÉ g·ª≠i DM cho user:", error.message);
            }

        } else if (action === 'edit') {
            // Hi·ªÉn th·ªã modal ƒë·ªÉ ch·ªânh s·ª≠a
            try {
                await interaction.reply({
                    content: "‚úèÔ∏è T√≠nh nƒÉng ch·ªânh s·ª≠a s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!",
                    flags: 64 // Ephemeral flag
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
        }

    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω review confession:", error);
        try {
            await interaction.reply({
                content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω review!",
                flags: 64 // Ephemeral flag
            });
        } catch (replyError) {
            console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
        }
    }
} 