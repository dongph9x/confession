const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const db = require("../data/mongodb");
const { getEmojiKeyFromCustomId, updateEmojiButtons } = require("../utils/emojiButtons");

module.exports = {
    name: "interactionCreate",
    async execute(interaction) {
        if (!interaction.isButton()) return;

        const { customId } = interaction;
        
        // X·ª≠ l√Ω c√°c button review confession
        if (customId.startsWith('approve_') || customId.startsWith('reject_') || customId.startsWith('edit_')) {
            await handleConfessionReview(interaction, customId);
        }
        // X·ª≠ l√Ω emoji buttons
        else if (customId.startsWith('emoji_')) {
            await handleEmojiButton(interaction, customId);
        }
    },
};

async function handleEmojiButton(interaction, customId) {
    try {
        await interaction.deferUpdate();
    } catch (deferError) {
        console.error("Kh√¥ng th·ªÉ defer update:", deferError.message);
        return;
    }

    const emojiKey = getEmojiKeyFromCustomId(customId);
    if (!emojiKey) {
        try {
            await interaction.followUp({
                content: "‚ùå Emoji kh√¥ng h·ª£p l·ªá!",
                flags: 64
            });
        } catch (replyError) {
            console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
        }
        return;
    }

    try {
        // L·∫•y confession ID t·ª´ message embed
        const embed = interaction.message.embeds[0];
        if (!embed || !embed.title) {
            try {
                await interaction.followUp({
                    content: "‚ùå Kh√¥ng t√¨m th·∫•y confession!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
            return;
        }

        // T√¨m confession ID t·ª´ title (Confession #123)
        const titleMatch = embed.title.match(/Confession #(\d+)/);
        if (!titleMatch) {
            try {
                await interaction.followUp({
                    content: "‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh confession!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
            return;
        }

        const confessionNumber = parseInt(titleMatch[1]);
        const confession = await db.getConfessionByNumber(interaction.guild.id, confessionNumber);
        
        if (!confession) {
            try {
                await interaction.followUp({
                    content: "‚ùå Kh√¥ng t√¨m th·∫•y confession!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
            return;
        }

        // Toggle emoji reaction
        const result = await db.toggleEmojiReaction(
            interaction.guild.id,
            confession._id,
            interaction.user.id,
            emojiKey
        );

        if (!result.success) {
            try {
                await interaction.followUp({
                    content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω emoji!",
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
            }
            return;
        }

        // L·∫•y emoji counts m·ªõi
        const emojiCounts = await db.getEmojiCounts(interaction.guild.id, confession._id);
        
        // L·∫•y user reactions ƒë·ªÉ highlight button
        const userReactions = await db.getUserEmojiReactions(
            interaction.guild.id,
            confession._id,
            interaction.user.id
        );

        // C·∫≠p nh·∫≠t buttons
        const updatedComponents = updateEmojiButtons(
            interaction.message.components,
            emojiCounts,
            userReactions
        );

        // C·∫≠p nh·∫≠t message
        try {
            await interaction.editReply({
                embeds: [embed],
                components: updatedComponents
            });
        } catch (updateError) {
            console.error("Kh√¥ng th·ªÉ edit reply:", updateError.message);
            // Fallback: th·ª≠ followUp n·∫øu edit th·∫•t b·∫°i
            try {
                await interaction.followUp({
                    content: `‚úÖ ${result.action === 'added' ? 'ƒê√£ th√™m' : 'ƒê√£ x√≥a'} emoji ${emojiKey}!`,
                    flags: 64
                });
            } catch (replyError) {
                console.error("Kh√¥ng th·ªÉ followUp interaction:", replyError.message);
            }
        }

    } catch (error) {
        console.error('Error handling emoji button:', error);
        try {
            await interaction.followUp({
                content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω emoji!",
                flags: 64
            });
        } catch (replyError) {
            console.error("Kh√¥ng th·ªÉ reply interaction:", replyError.message);
        }
    }
}

async function handleConfessionReview(interaction, customId) {
    // Ki·ªÉm tra quy·ªÅn
    if (!interaction.member.permissions.has('ManageMessages')) {
        return interaction.reply({
            content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªÉ duy·ªát confession!",
            flags: 64 // Ephemeral flag
        });
    }

    const confessionId = customId.split('_')[1];
    const action = customId.split('_')[0];

    try {
        // Defer update ngay t·ª´ ƒë·∫ßu ƒë·ªÉ tr√°nh timeout
        await interaction.deferUpdate();
        
        const confession = await db.getConfession(confessionId);
        if (!confession) {
            return interaction.followUp({
                content: "‚ùå Kh√¥ng t√¨m th·∫•y confession n√†y!",
                flags: 64 // Ephemeral flag
            });
        }

        // Ki·ªÉm tra xem confession ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ch∆∞a
        if (confession.status !== 'pending') {
            return interaction.followUp({
                content: `‚ùå Confession n√†y ƒë√£ ƒë∆∞·ª£c ${confession.status === 'approved' ? 'duy·ªát' : 't·ª´ ch·ªëi'} r·ªìi!`,
                flags: 64 // Ephemeral flag
            });
        }

        if (action === 'approve') {
            // L·∫•y guild settings
            const guildSettings = await db.getGuildSettings(interaction.guild.id);
            if (!guildSettings) {
                return interaction.followUp({
                    content: "‚ùå Guild settings ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!",
                    flags: 64 // Ephemeral flag
                });
            }

            // Ki·ªÉm tra k√™nh confession
            const confessionChannel = interaction.guild.channels.cache.get(guildSettings.confessionChannel);
            if (!confessionChannel) {
                return interaction.followUp({
                    content: "‚ùå K√™nh confession ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p!",
                    flags: 64 // Ephemeral flag
                });
            }

            // L·∫•y th√¥ng tin user
            const confessionAuthor = await interaction.client.users.fetch(confession.userId);
            const isAnonymous = confession.isAnonymous;

            // T·∫°o embed cho confession ƒë√£ duy·ªát
            const approvedEmbed = new EmbedBuilder()
                .setColor(0x00FF00)
                .setTitle("üíù Confession #" + (guildSettings.confessionCounter + 1))
                .setDescription(confession.content)
                .addFields(
                    { 
                        name: "üë§ Ng∆∞·ªùi g·ª≠i", 
                        value: isAnonymous ? "üïµÔ∏è ·∫®n danh" : `<@${confession.userId}>`, 
                        inline: true 
                    },
                    { 
                        name: "‚è∞ Th·ªùi gian", 
                        value: `<t:${Math.floor(new Date(confession.createdAt).getTime() / 1000)}:R>`, 
                        inline: true 
                    }
                )
                .setFooter({
                    text: `Confession Bot ‚Ä¢ ${interaction.guild.name}`,
                    iconURL: interaction.guild.iconURL(),
                })
                .setTimestamp();

            // Ch·ªâ hi·ªÉn th·ªã author n·∫øu kh√¥ng ·ªü ch·∫ø ƒë·ªô ·∫©n danh
            if (!isAnonymous) {
                approvedEmbed.setAuthor({
                    name: confessionAuthor.username,
                    iconURL: confessionAuthor.displayAvatarURL()
                });
            }

            // T·∫°o emoji buttons
            const { createEmojiButtons } = require("../utils/emojiButtons");
            const emojiCounts = await db.getEmojiCounts(interaction.guild.id, confession._id);
            const emojiButtons = createEmojiButtons(emojiCounts);

            const message = await confessionChannel.send({ 
                embeds: [approvedEmbed],
                components: emojiButtons
            });

            // T·∫°o thread cho confession ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ b√¨nh lu·∫≠n
            const thread = await message.startThread({
                name: `üí¨ B√¨nh lu·∫≠n Confession #${guildSettings.confessionCounter + 1}`,
                autoArchiveDuration: 1440, // 24 gi·ªù
                reason: 'Thread cho confession'
            });

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong database v·ªõi message ID v√† thread ID
            await db.updateConfessionStatus(confessionId, 'approved', interaction.user.id, message.id, thread.id);

            // C·∫≠p nh·∫≠t embed g·ªëc
            const originalEmbed = EmbedBuilder.from(interaction.message.embeds[0])
                .setColor(0x00FF00)
                .addFields(
                    { name: "‚úÖ Tr·∫°ng th√°i", value: "ƒê√£ duy·ªát", inline: true },
                    { name: "üë§ Ng∆∞·ªùi duy·ªát", value: `<@${interaction.user.id}>`, inline: true },
                    { name: "‚è∞ Th·ªùi gian duy·ªát", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
                );

            await interaction.message.edit({
                embeds: [originalEmbed],
                components: []
            });

            await interaction.followUp({
                content: `‚úÖ ƒê√£ duy·ªát confession #${confessionId}!`,
                flags: 64 // Ephemeral flag
            });

        } else if (action === 'reject') {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i trong database
            await db.updateConfessionStatus(confessionId, 'rejected', interaction.user.id);

            // C·∫≠p nh·∫≠t embed g·ªëc
            const originalEmbed = EmbedBuilder.from(interaction.message.embeds[0])
                .setColor(0xFF0000)
                .addFields(
                    { name: "‚ùå Tr·∫°ng th√°i", value: "ƒê√£ t·ª´ ch·ªëi", inline: true },
                    { name: "üë§ Ng∆∞·ªùi t·ª´ ch·ªëi", value: `<@${interaction.user.id}>`, inline: true },
                    { name: "‚è∞ Th·ªùi gian t·ª´ ch·ªëi", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true }
                );

            await interaction.message.edit({
                embeds: [originalEmbed],
                components: []
            });

            await interaction.followUp({
                content: `‚ùå ƒê√£ t·ª´ ch·ªëi confession #${confessionId}!`,
                flags: 64 // Ephemeral flag
            });

        } else if (action === 'edit') {
            // Hi·ªÉn th·ªã modal ƒë·ªÉ ch·ªânh s·ª≠a
            await interaction.followUp({
                content: "‚úèÔ∏è T√≠nh nƒÉng ch·ªânh s·ª≠a s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!",
                flags: 64 // Ephemeral flag
            });
        }

    } catch (error) {
        console.error("L·ªói khi x·ª≠ l√Ω review confession:", error);
        try {
            await interaction.followUp({
                content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω review!",
                flags: 64 // Ephemeral flag
            });
        } catch (followUpError) {
            console.error("Kh√¥ng th·ªÉ g·ª≠i followUp:", followUpError.message);
        }
    }
} 