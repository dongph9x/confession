const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const db = require("../../data/mongodb");
const config = require("../../config/bot");

module.exports = {
    name: "confess",
    description: "G·ª≠i m·ªôt confession ·∫©n danh",
    cooldown: 5, // 5 gi√¢y cooldown
    async execute(message, args) {
        // X√≥a tin nh·∫Øn g·ªëc v·ªõi error handling
        try {
            await message.delete();
        } catch (error) {
            // B·ªè qua l·ªói n·∫øu kh√¥ng th·ªÉ x√≥a tin nh·∫Øn
            console.log("Could not delete message:", error.message);
        }

        // Ki·ªÉm tra argument cho ch·∫ø ƒë·ªô ·∫©n danh
        let isAnonymous = false;
        let content = args.join(" ");
        
        // Ki·ªÉm tra flag ·∫©n danh
        if (args.length > 0 && (args[0] === "anonymous" || args[0] === "anon" || args[0] === "·∫©n")) {
            isAnonymous = true;
            content = args.slice(1).join(" ");
        }

        if (!content) {
            const errorMsg = await message.channel.send(
                "‚ùå Vui l√≤ng nh·∫≠p n·ªôi dung confession!\n\n**C√°ch s·ª≠ d·ª•ng:**\n`!confess n·ªôi dung` - G·ª≠i confession b√¨nh th∆∞·ªùng\n`!confess anonymous n·ªôi dung` - G·ª≠i confession ·∫©n danh\n`!confess anon n·ªôi dung` - G·ª≠i confession ·∫©n danh"
            );
            setTimeout(() => {
                errorMsg.delete().catch(() => {}); // B·ªè qua l·ªói n·∫øu kh√¥ng th·ªÉ x√≥a
            }, 8000);
            return;
        }

        // Ki·ªÉm tra ƒë·ªô d√†i confession
        if (content.length > config.confession.maxLength) {
            const errorMsg = await message.channel.send(
                `‚ùå Confession qu√° d√†i! T·ªëi ƒëa ${config.confession.maxLength} k√Ω t·ª±.`
            );
            setTimeout(() => {
                errorMsg.delete().catch(() => {});
            }, 5000);
            return;
        }

        if (content.length < config.confession.minLength) {
            const errorMsg = await message.channel.send(
                `‚ùå Confession qu√° ng·∫Øn! T·ªëi thi·ªÉu ${config.confession.minLength} k√Ω t·ª±.`
            );
            setTimeout(() => {
                errorMsg.delete().catch(() => {});
            }, 5000);
            return;
        }

        const guildSettings = await db.getGuildSettings(message.guild.id);
        if (!guildSettings?.reviewChannel) {
            const errorMsg = await message.channel.send(
                "‚ùå K√™nh review confession ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p! H√£y nh·ªù Admin s·ª≠ d·ª•ng l·ªánh `!setreview`"
            );
            setTimeout(() => {
                errorMsg.delete().catch(() => {});
            }, 5000);
            return;
        }

        const reviewChannel = message.guild.channels.cache.get(
            guildSettings.reviewChannel
        );
        if (!reviewChannel) {
            const errorMsg = await message.channel.send(
                "‚ùå Kh√¥ng t√¨m th·∫•y k√™nh review! C√≥ th·ªÉ k√™nh ƒë√£ b·ªã x√≥a."
            );
            setTimeout(() => {
                errorMsg.delete().catch(() => {});
            }, 5000);
            return;
        }

        try {
            // Ki·ªÉm tra confession g·∫ßn ƒë√¢y ƒë·ªÉ tr√°nh duplicate
            const recentConfessions = await db.getRecentConfessions(message.guild.id, message.author.id, 30); // 30 gi√¢y
            const duplicateConfession = recentConfessions.find(conf => 
                conf.content === content && 
                conf.isAnonymous === isAnonymous &&
                Date.now() - new Date(conf.createdAt).getTime() < 30000 // 30 gi√¢y
            );

            if (duplicateConfession) {
                const errorMsg = await message.channel.send(
                    "‚ö†Ô∏è B·∫°n v·ª´a g·ª≠i confession t∆∞∆°ng t·ª±! Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t ho·∫∑c thay ƒë·ªïi n·ªôi dung."
                );
                setTimeout(() => {
                    errorMsg.delete().catch(() => {});
                }, 5000);
                return;
            }

            // L∆∞u confession v√†o database v·ªõi th√¥ng tin ·∫©n danh
            const confessionId = await db.addConfession(
                message.guild.id,
                message.author.id,
                content,
                isAnonymous
            );

            if (!confessionId) {
                throw new Error("Failed to save confession to database");
            }

            // T·∫°o embed cho review
            const reviewEmbed = new EmbedBuilder()
                .setColor(config.colors.warning)
                .setTitle("üìù Confession C·∫ßn Duy·ªát")
                .setDescription(content)
                .addFields(
                    { name: "üÜî ID Confession", value: `#${confessionId}`, inline: true },
                    { name: "üë§ Ng∆∞·ªùi g·ª≠i", value: `<@${message.author.id}>`, inline: true },
                    { name: "‚è∞ Th·ªùi gian", value: `<t:${Math.floor(Date.now() / 1000)}:R>`, inline: true },
                    { name: "üïµÔ∏è Ch·∫ø ƒë·ªô", value: isAnonymous ? "üïµÔ∏è ·∫®n danh" : "üë§ Hi·ªÉn th·ªã t√™n", inline: true }
                )
                .setAuthor({
                    name: message.author.username,
                    iconURL: message.author.displayAvatarURL()
                })
                .setFooter({
                    text: `Confession Bot ‚Ä¢ ${message.guild.name}`,
                    iconURL: message.guild.iconURL(),
                })
                .setTimestamp();

            // T·∫°o buttons
            const buttons = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`approve_${confessionId}`)
                        .setLabel("‚úÖ Duy·ªát")
                        .setStyle(ButtonStyle.Success),
                    new ButtonBuilder()
                        .setCustomId(`reject_${confessionId}`)
                        .setLabel("‚ùå T·ª´ ch·ªëi")
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId(`edit_${confessionId}`)
                        .setLabel("‚úèÔ∏è Ch·ªânh s·ª≠a")
                        .setStyle(ButtonStyle.Secondary)
                );

            await reviewChannel.send({
                content: `üìù Confession m·ªõi t·ª´ **${message.author.username}** (${message.author.tag}) c·∫ßn duy·ªát!`,
                embeds: [reviewEmbed],
                components: [buttons]
            });

            const successMsg = await message.channel.send(
                `‚úÖ Confession c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ duy·ªát! ${isAnonymous ? 'üïµÔ∏è Confession s·∫Ω ƒë∆∞·ª£c ƒëƒÉng ·∫©n danh.' : 'üë§ Confession s·∫Ω hi·ªÉn th·ªã t√™n c·ªßa b·∫°n.'}\n\nB·∫°n s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o khi confession ƒë∆∞·ª£c duy·ªát ho·∫∑c t·ª´ ch·ªëi.`
            );
            setTimeout(() => {
                successMsg.delete().catch(() => {});
            }, 8000);
        } catch (error) {
            console.error("L·ªói khi g·ª≠i confession:", error);
            const errorMsg = await message.channel.send(
                "‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i confession!"
            );
            setTimeout(() => {
                errorMsg.delete().catch(() => {});
            }, 5000);
        }
    },
};
